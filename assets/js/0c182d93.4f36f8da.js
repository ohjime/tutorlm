"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9733],{126:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/highlevel-ce7e654a273899edf0d1cc54787bc5a9.svg"},1159:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/index","title":"Development Overview","description":"This document details the software architecture strategy for TutorLM. Our approach is fundamentally geared towards creating a system that is modular, scalable, easily testable, and straightforward to maintain over time. To achieve these goals, we primarily employ a feature-first organizational structure, where the codebase is segmented by distinct application capabilities. This structure is further reinforced by principles inspired by Clean Architecture, which guide us in establishing a clear separation of concerns across different layers of the application.","source":"@site/docs/development/index.mdx","sourceDirName":"development","slug":"/development/","permalink":"/tutorlm/docs/development/","draft":false,"unlisted":false,"editUrl":"https://github.com/ohjime/tutorlm/tree/main/docs/docs/development/index.mdx","tags":[],"version":"current","lastUpdatedAt":1748802124000,"sidebarPosition":0,"frontMatter":{"sidebar_position":0,"sidebar_label":"Development Overview"},"sidebar":"developmentSidebar","next":{"title":"Domain Layer","permalink":"/tutorlm/docs/development/domain"}}');var r=i(4848),t=i(8453);const l={sidebar_position:0,sidebar_label:"Development Overview"},a="Development Overview",o={},c=[{value:"Architectural Layers and Code Structure",id:"architectural-layers-and-code-structure",level:3},{value:"Feature-Driven Development",id:"feature-driven-development",level:3},{value:"The Presentation Layer",id:"the-presentation-layer",level:3},{value:"The Domain Layer",id:"the-domain-layer",level:3},{value:"The Data Layer",id:"the-data-layer",level:3},{value:"Understanding Interaction and Data Flow",id:"understanding-interaction-and-data-flow",level:3},{value:"Facilitating Inter-Feature Communication",id:"facilitating-inter-feature-communication",level:3},{value:"Managing Cross-Cutting Concerns",id:"managing-cross-cutting-concerns",level:3},{value:"Advantages of This Architectural Approach",id:"advantages-of-this-architectural-approach",level:3},{value:"Visualizing the High-Level Architecture of TutorLM",id:"visualizing-the-high-level-architecture-of-tutorlm",level:3},{value:"Potential Considerations and Trade-offs",id:"potential-considerations-and-trade-offs",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"development-overview",children:"Development Overview"})}),"\n",(0,r.jsx)(n.p,{children:"This document details the software architecture strategy for TutorLM. Our approach is fundamentally geared towards creating a system that is modular, scalable, easily testable, and straightforward to maintain over time. To achieve these goals, we primarily employ a feature-first organizational structure, where the codebase is segmented by distinct application capabilities. This structure is further reinforced by principles inspired by Clean Architecture, which guide us in establishing a clear separation of concerns across different layers of the application."}),"\n",(0,r.jsx)(n.p,{children:"The architecture is built upon several core tenets:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modularity:"})," Features are developed as largely independent units."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separation of Concerns:"})," Clear boundaries between UI logic, core business rules, and data handling."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dependency Rule:"})," Dependencies point inwards\u2014from Presentation to Domain, with Data serving Domain."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testability:"})," Each layer/component can be verified in isolation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalability & Maintainability:"})," New features integrate with minimal disruption; codebase remains organized and adaptable."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"architectural-layers-and-code-structure",children:"Architectural Layers and Code Structure"}),"\n",(0,r.jsx)(n.p,{children:"The application is conceptually divided into three primary layers:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Presentation (Application) Layer"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Domain Layer"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Data Layer"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Physically, the codebase reflects this through feature-specific folders, a central ",(0,r.jsx)(n.code,{children:"core"})," folder, and an ",(0,r.jsx)(n.code,{children:"app"})," folder, each with a distinct role."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"feature-driven-development",children:"Feature-Driven Development"}),"\n",(0,r.jsxs)(n.p,{children:["The cornerstone of our organizational strategy is a ",(0,r.jsx)(n.strong,{children:"feature-based approach"}),". Each significant capability (e.g., Authentication, Session Management, Chat, User Profile) is encapsulated within its own folder (e.g., ",(0,r.jsx)(n.code,{children:"lib/auth/"}),", ",(0,r.jsx)(n.code,{children:"lib/session/"}),")."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"UI, state management, and feature logic are co-located."})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Feature modules are highly independent,"})," depending mainly on the ",(0,r.jsx)(n.code,{children:"core"})," folder (for shared business logic, domain models, repository interfaces) and occasionally the ",(0,r.jsx)(n.code,{children:"app"})," folder (for global configs, routing, shared state)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Direct dependencies between features are minimized,"})," promoting decoupling and isolation."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"the-presentation-layer",children:"The Presentation Layer"}),"\n",(0,r.jsx)(n.p,{children:"Responsible for everything the user sees and interacts with:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"UI Components:"})," Widgets/Views in each feature folder (e.g., ",(0,r.jsx)(n.code,{children:"lib/session/view/"}),", ",(0,r.jsx)(n.code,{children:"lib/session/widgets/"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State Management:"})," Predominantly uses the Bloc library. Each feature has its own Blocs or Cubits (e.g., ",(0,r.jsx)(n.code,{children:"lib/session/bloc/"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Blocs:"})," For complex state with multiple events and transformations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cubits:"})," For simpler, lightweight state management."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"UI widgets listen to state changes"})," (using ",(0,r.jsx)(n.code,{children:"BlocBuilder"})," or similar) and rebuild accordingly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User actions"})," are dispatched as events to Blocs or as method calls to Cubits."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["The ",(0,r.jsx)(n.code,{children:"app"})," folder"]})," (e.g., ",(0,r.jsx)(n.code,{children:"lib/app/"}),"):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Manages global state (e.g., authentication status, theme, localization) via a global ",(0,r.jsx)(n.code,{children:"AppBloc"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Handles root navigation setup and app lifecycle management."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Interaction Flow:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"UI reacts to Bloc/Cubit state changes."}),"\n",(0,r.jsx)(n.li,{children:"User interactions are channeled to state management components."}),"\n",(0,r.jsx)(n.li,{children:"Blocs/Cubits interact with repositories in the Domain Layer."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"the-domain-layer",children:"The Domain Layer"}),"\n",(0,r.jsxs)(n.p,{children:["Encapsulated primarily within the ",(0,r.jsx)(n.code,{children:"core"})," folder. This is the application's business logic and core data structures."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Domain Models (Entities):"})," Plain Dart objects (e.g., ",(0,r.jsx)(n.code,{children:"User"}),", ",(0,r.jsx)(n.code,{children:"Session"}),", ",(0,r.jsx)(n.code,{children:"Course"})," in ",(0,r.jsx)(n.code,{children:"lib/core/models/"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository Interfaces:"})," Abstract contracts (e.g., ",(0,r.jsx)(n.code,{children:"AuthenticationRepository"}),", ",(0,r.jsx)(n.code,{children:"SessionRepository"})," in ",(0,r.jsx)(n.code,{children:"lib/core/repositories/"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use Cases:"})," (Optional) Encapsulate specific business logic/user stories."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Characteristics:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"No Flutter-specific code."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"No widgets or Flutter dependencies."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Platform-agnostic and highly testable."})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"the-data-layer",children:"The Data Layer"}),"\n",(0,r.jsx)(n.p,{children:"Responsible for data retrieval, storage, and communication with external/local sources. Provides concrete implementations for repository interfaces."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository Implementations:"})," In ",(0,r.jsx)(n.code,{children:"lib/core/repositories/"}),", implement interfaces from the Domain Layer (e.g., ",(0,r.jsx)(n.code,{children:"SessionRepositoryImpl"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Sources:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"External Services/SDKs:"})," Firebase Auth, Firestore, Storage, FCM, Google Sign-In, etc."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local Data Sources:"})," (If needed) SQLite, shared preferences, etc."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Transfer Objects (DTOs):"})," Used for mapping between external data and Domain Models."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Transformation:"})," Converts raw data (e.g., Firestore docs, JSON) to Domain Models and vice versa."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Even without a dedicated ",(0,r.jsx)(n.code,{children:"data_sources"})," sub-folder, the Data Layer's responsibilities are fulfilled by repository implementations that interact with SDKs."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"understanding-interaction-and-data-flow",children:"Understanding Interaction and Data Flow"}),"\n",(0,r.jsx)(n.p,{children:"The architecture promotes a clear, unidirectional flow of data and dependencies:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Interaction"})," occurs in a UI widget."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event/Action"})," is dispatched to a Bloc/Cubit."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bloc/Cubit"})," communicates with a Repository Interface (Domain Layer)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository Interface"})," is routed to its Concrete Implementation (Data Layer) via Dependency Injection."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository Implementation"})," interacts with the Data Source (e.g., Firebase)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data is Retrieved/Transformed"})," into Domain Models."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Domain Model(s) or error"})," are returned to the Bloc/Cubit."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Bloc/Cubit emits a New State."})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"UI Widgets rebuild"})," to reflect the new state."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"facilitating-inter-feature-communication",children:"Facilitating Inter-Feature Communication"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Surface-Level (Navigational):"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Managed in ",(0,r.jsx)(n.code,{children:"main.dart"})," or a router config file."]}),"\n",(0,r.jsxs)(n.li,{children:["Features navigate via named routes (e.g., ",(0,r.jsx)(n.code,{children:"Navigator.pushNamed(context, '/featureB_view')"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Avoids direct import dependencies between feature UIs."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deeper (Data-Driven):"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Mediated through shared repositories in the ",(0,r.jsx)(n.code,{children:"core"})," folder."]}),"\n",(0,r.jsxs)(n.li,{children:["Repositories are provided high in the widget tree (e.g., with ",(0,r.jsx)(n.code,{children:"RepositoryProvider"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Repositories may expose data as ",(0,r.jsx)(n.strong,{children:"Streams"})," (e.g., ",(0,r.jsx)(n.code,{children:"Stream<List<Session>>"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Features subscribe to streams and react to updates, enabling a reactive, decoupled system."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"managing-cross-cutting-concerns",children:"Managing Cross-Cutting Concerns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dependency Injection:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"RepositoryProvider"})," and ",(0,r.jsx)(n.code,{children:"BlocProvider"})," from ",(0,r.jsx)(n.code,{children:"flutter_bloc"})," for dependency management and testability."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent Styling & Theming:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Centralized in ",(0,r.jsx)(n.code,{children:"lib/core/style/"})," (e.g., ",(0,r.jsx)(n.code,{children:"themes.dart"}),")."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shared Widgets:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Common UI elements in ",(0,r.jsx)(n.code,{children:"lib/core/widgets/"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Utilities & Formatters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Helper functions in ",(0,r.jsx)(n.code,{children:"lib/core/utils/"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Repositories return results indicating success/failure (e.g., ",(0,r.jsx)(n.code,{children:"Either"}),", custom ",(0,r.jsx)(n.code,{children:"Result"}),", or typed exceptions)."]}),"\n",(0,r.jsxs)(n.li,{children:["Blocs/Cubits translate errors into UI states (e.g., ",(0,r.jsx)(n.code,{children:"ErrorState"}),")."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Application Configuration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Centralized (e.g., ",(0,r.jsx)(n.code,{children:"firebase_options.dart"}),", environment configs)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"advantages-of-this-architectural-approach",children:"Advantages of This Architectural Approach"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modularity & Decoupling:"})," Features are well-isolated and easy to manage."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testability:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Blocs/Cubits can be unit-tested with mocked repositories."}),"\n",(0,r.jsx)(n.li,{children:"Domain logic is testable in isolation."}),"\n",(0,r.jsx)(n.li,{children:"Repository implementations can be tested with mocked data sources."}),"\n",(0,r.jsx)(n.li,{children:"Widget testing is simplified by providing mock Blocs/Cubits."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalability:"})," New features or changes have localized impact."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintainability:"})," Clear structure reduces cognitive load and risk of regressions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parallel Development:"})," Teams can work on different features concurrently with minimal conflicts."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"visualizing-the-high-level-architecture-of-tutorlm",children:"Visualizing the High-Level Architecture of TutorLM"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"TutorLM Architecture",src:i(126).A+"",width:"1519",height:"1631"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"potential-considerations-and-trade-offs",children:"Potential Considerations and Trade-offs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initial Setup Complexity:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Higher than monolithic approaches; more boilerplate and a steeper learning curve."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"For Small/Simple Projects:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Strict layering may be overkill, but pays off as the app grows."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);