"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8541],{4475:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"development/features/signup/cubit","title":"Signup State Machine","description":"The signup process is orchestrated by SignupCubit, which handles form data collection incrementally and delegates persistence to domain repositories (AuthenticationRepository, UserRepository, TutorRepository, StudentRepository, StorageRepository). Each domain model (User, Tutor, Student) is stored and updated immutably in the state, leveraging copyWith for safe state transitions.","source":"@site/docs/development/features/signup/cubit.md","sourceDirName":"development/features/signup","slug":"/development/features/signup/cubit","permalink":"/tutorlm/docs/development/features/signup/cubit","draft":false,"unlisted":false,"editUrl":"https://github.com/ohjime/tutorlm/tree/main/docs/docs/development/features/signup/cubit.md","tags":[],"version":"current","lastUpdatedAt":1748746777000,"frontMatter":{},"sidebar":"developmentSidebar","previous":{"title":"Signup Feature","permalink":"/tutorlm/docs/development/features/signup/"},"next":{"title":"Signup Views","permalink":"/tutorlm/docs/development/features/signup/view"}}');var s=n(4848),r=n(8453);const o={},a="Signup State Machine",d={},c=[{value:"SignupState",id:"signupstate",level:3},{value:"SignupCubit",id:"signupcubit",level:3},{value:"Methods",id:"methods",level:4},{value:"State Machine Diagram of Signup Feature",id:"state-machine-diagram-of-signup-feature",level:5}];function l(e){const t={code:"code",h1:"h1",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"signup-state-machine",children:"Signup State Machine"})}),"\n",(0,s.jsxs)(t.p,{children:["The signup process is orchestrated by ",(0,s.jsx)(t.code,{children:"SignupCubit"}),", which handles form data collection incrementally and delegates persistence to domain repositories (",(0,s.jsx)(t.code,{children:"AuthenticationRepository"}),", ",(0,s.jsx)(t.code,{children:"UserRepository"}),", ",(0,s.jsx)(t.code,{children:"TutorRepository"}),", ",(0,s.jsx)(t.code,{children:"StudentRepository"}),", ",(0,s.jsx)(t.code,{children:"StorageRepository"}),"). Each domain model (",(0,s.jsx)(t.code,{children:"User"}),", ",(0,s.jsx)(t.code,{children:"Tutor"}),", ",(0,s.jsx)(t.code,{children:"Student"}),") is stored and updated immutably in the state, leveraging ",(0,s.jsx)(t.code,{children:"copyWith"})," for safe state transitions."]}),"\n",(0,s.jsx)(t.mermaid,{value:"classDiagram\n    class SignupCubit {\n        - AuthenticationRepository _authenticationRepository\n        - UserRepository _userRepository\n        - StorageRepository _storageRepository\n        - TutorRepository _tutorRepository\n        - StudentRepository _studentRepository\n        + SignupCubit(AuthenticationRepository authenticationRepository, ...)\n        + selectRole(UserRole role)\n        + updateUser(`Map<String, dynamic>` userData)\n        + updateTutor(`Map<String, dynamic>` tutorData)\n        + updateStudent(`Map<String, dynamic>` studentData)\n        + submit()\n        + submitWithGoogle()\n    }\n\n    class SignupState {\n        + SignupStatus status\n        + User user\n        + Tutor tutor\n        + Student student\n        + String? error\n        + SignupState copyWith(...)\n    }\n\n    SignupCubit --\x3e SignupState"}),"\n",(0,s.jsx)(t.h3,{id:"signupstate",children:"SignupState"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"SignupState"})," represents the current signup workflow state:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"status"}),": ",(0,s.jsx)(t.code,{children:"initial"})," | ",(0,s.jsx)(t.code,{children:"loading"})," | ",(0,s.jsx)(t.code,{children:"success"})," | ",(0,s.jsx)(t.code,{children:"failure"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"user"}),": Partial or complete ",(0,s.jsx)(t.code,{children:"User"})," model"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"tutor"}),": Partial or complete ",(0,s.jsx)(t.code,{children:"Tutor"})," model"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"student"}),": Partial or complete ",(0,s.jsx)(t.code,{children:"Student"})," model"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"error"}),": Optional error message on failure"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["States are immutable; use ",(0,s.jsx)(t.code,{children:"copyWith"})," to create new instances with updated fields."]}),"\n",(0,s.jsx)(t.h3,{id:"signupcubit",children:"SignupCubit"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"SignupCubit"})," manages interaction between UI and repositories, emitting new ",(0,s.jsx)(t.code,{children:"SignupState"})," instances as the user progresses through signup."]}),"\n",(0,s.jsx)(t.h4,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"selectRole(UserRole role)"}),"\nSets the selected user role (",(0,s.jsx)(t.code,{children:"tutor"})," or ",(0,s.jsx)(t.code,{children:"student"}),") in state, allowing the UI to render appropriate form fields."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:["updateUser(",(0,s.jsx)(t.code,{children:"Map<String, dynamic>"})," userData)"]}),"\nMerges incoming ",(0,s.jsx)(t.code,{children:"userData"})," into the existing ",(0,s.jsx)(t.code,{children:"User"})," model via ",(0,s.jsx)(t.code,{children:"copyWith"}),", updating form state without side effects."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:["updateTutor(",(0,s.jsx)(t.code,{children:"Map<String, dynamic>"})," tutorData)"]}),"\nMerges ",(0,s.jsx)(t.code,{children:"tutorData"})," into the ",(0,s.jsx)(t.code,{children:"Tutor"})," model via ",(0,s.jsx)(t.code,{children:"copyWith"}),", updating tutor-specific fields."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:["updateStudent(",(0,s.jsx)(t.code,{children:"Map<String, dynamic>"})," studentData)"]}),"\nMerges ",(0,s.jsx)(t.code,{children:"studentData"})," into the ",(0,s.jsx)(t.code,{children:"Student"})," model via ",(0,s.jsx)(t.code,{children:"copyWith"}),", updating student-specific fields."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"submit()"}),"\nExecutes the full signup flow:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Emit ",(0,s.jsx)(t.code,{children:"loading"})," status."]}),"\n",(0,s.jsxs)(t.li,{children:["Call ",(0,s.jsx)(t.code,{children:"authenticationRepository.signUp(...)"})," to create auth credentials."]}),"\n",(0,s.jsxs)(t.li,{children:["Upload profile images via ",(0,s.jsx)(t.code,{children:"storageRepository.upload..."}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Create role-specific record (",(0,s.jsx)(t.code,{children:"Tutor"})," or ",(0,s.jsx)(t.code,{children:"Student"}),") in its repository."]}),"\n",(0,s.jsxs)(t.li,{children:["Persist the final ",(0,s.jsx)(t.code,{children:"User"})," model with ",(0,s.jsx)(t.code,{children:"userRepository.create"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Emit ",(0,s.jsx)(t.code,{children:"success"})," on completion or ",(0,s.jsx)(t.code,{children:"failure"})," with ",(0,s.jsx)(t.code,{children:"error"})," on exception."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"submitWithGoogle()"}),"\nSimilar to ",(0,s.jsx)(t.code,{children:"submit()"}),", but begins with ",(0,s.jsx)(t.code,{children:"authenticationRepository.signInWithGoogle()"}),". Once credentials are obtained, follows the same sequence: image upload, model creation, and final user persistence."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"We can relate the SignupState and SignupCubit methods using a state machine diagram, which illustrates the different ways a user can reach a specific state in the signup process."}),"\n",(0,s.jsx)(t.h5,{id:"state-machine-diagram-of-signup-feature",children:"State Machine Diagram of Signup Feature"}),"\n",(0,s.jsx)(t.mermaid,{value:"stateDiagram-v2\n    [*] --\x3e Initial : Start\n    Initial : SignupState.initial\n    Initial --\x3e SignupState : updateUser(data)\n    Initial --\x3e SignupState : selectRole(role)\n    Initial --\x3e SignupState  : updateTutor(data)\n    Initial --\x3e SignupState  : updateStudent(data)\n    SignupState --\x3e SignupState.copyWith(loading) : submit()\n    SignupState --\x3e SignupState.copyWith(loading) : submitWithGoogle()\n    SignupState.copyWith(loading) --\x3e SignupState.copyWith(success) : Success\n    SignupState.copyWith(loading) --\x3e SignupState.copyWith(failure) : Failure\n    SignupState.copyWith(success) --\x3e [*] : End\n    SignupState.copyWith(failure) --\x3e SignupState : "})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);