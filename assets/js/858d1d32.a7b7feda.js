"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4118],{4873:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"development/features/chat","title":"Chat Overview","description":"1. Overall Feature Overview","source":"@site/docs/development/features/chat.mdx","sourceDirName":"development/features","slug":"/development/features/chat","permalink":"/tutorlm/docs/development/features/chat","draft":false,"unlisted":false,"editUrl":"https://github.com/ohjime/tutorlm/tree/main/docs/docs/development/features/chat.mdx","tags":[],"version":"current","lastUpdatedAt":1750659568000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Chat Feature"},"sidebar":"developmentSidebar","previous":{"title":"App Feature","permalink":"/tutorlm/docs/development/features/app"},"next":{"title":"Home Feature","permalink":"/tutorlm/docs/development/features/home"}}');var n=s(4848),i=s(8453);const r={sidebar_position:1,sidebar_label:"Chat Feature"},c="Chat Overview",d={},l=[{value:"1. Overall Feature Overview",id:"1-overall-feature-overview",level:2},{value:"2. Chat List Sub-Feature (<code>MessagesPage</code>)",id:"2-chat-list-sub-feature-messagespage",level:2},{value:"2.1. Overview",id:"21-overview",level:3},{value:"2.2. Class Diagram (<code>MessagesPage</code>)",id:"22-class-diagram-messagespage",level:3},{value:"Key Relationships:",id:"key-relationships",level:4},{value:"2.3. Sequence Diagram: Loading and Displaying Chats",id:"23-sequence-diagram-loading-and-displaying-chats",level:3},{value:"2.4. State Management",id:"24-state-management",level:3},{value:"3. Start New Chat Sub-Feature (<code>NewChatPage</code>)",id:"3-start-new-chat-sub-feature-newchatpage",level:2},{value:"3.1. Overview",id:"31-overview",level:3},{value:"3.2. Class Diagram (<code>NewChatPage</code>)",id:"32-class-diagram-newchatpage",level:3},{value:"Key Relationships:",id:"key-relationships-1",level:4},{value:"3.3. Sequence Diagram: Starting a New Chat",id:"33-sequence-diagram-starting-a-new-chat",level:3},{value:"3.4. State Management",id:"34-state-management",level:3},{value:"4. Chat Screen Sub-Feature (<code>ChatScreen</code>)",id:"4-chat-screen-sub-feature-chatscreen",level:2},{value:"4.1. Overview",id:"41-overview",level:3},{value:"4.2. Class Diagram (<code>ChatScreen</code>)",id:"42-class-diagram-chatscreen",level:3},{value:"Key Relationships:",id:"key-relationships-2",level:4},{value:"4.3. Sequence Diagram: Sending a Message",id:"43-sequence-diagram-sending-a-message",level:3},{value:"4.4. Sequence Diagram: Receiving Messages",id:"44-sequence-diagram-receiving-messages",level:3},{value:"4.5. State Management",id:"45-state-management",level:3},{value:"5. External Dependencies for Chat Feature",id:"5-external-dependencies-for-chat-feature",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"chat-overview",children:"Chat Overview"})}),"\n",(0,n.jsx)(t.h2,{id:"1-overall-feature-overview",children:"1. Overall Feature Overview"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.strong,{children:"Chat"})," feature enables real-time text-based communication between users within the application, primarily facilitating interaction between tutors and students. It allows users to:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"View a list of their ongoing conversations."}),"\n",(0,n.jsx)(t.li,{children:"Initiate new chats with other users."}),"\n",(0,n.jsx)(t.li,{children:"Send and receive messages within a dedicated chat screen."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The feature is primarily composed of three main UI components: ",(0,n.jsx)(t.code,{children:"MessagesPage"})," for listing existing chats, ",(0,n.jsx)(t.code,{children:"NewChatPage"})," for starting new conversations, and ",(0,n.jsx)(t.code,{children:"ChatScreen"})," for the actual messaging interface. Data persistence and real-time updates are handled by ",(0,n.jsx)(t.code,{children:"Firebase Firestore"}),", accessed through the ",(0,n.jsx)(t.code,{children:"ChatRepository"})," (from the core module) and direct Firestore SDK calls in the UI components."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.h2,{id:"2-chat-list-sub-feature-messagespage",children:["2. Chat List Sub-Feature (",(0,n.jsx)(t.code,{children:"MessagesPage"}),")"]}),"\n",(0,n.jsx)(t.h3,{id:"21-overview",children:"2.1. Overview"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"MessagesPage"})," displays a list of all chat conversations the current user is a part of. Each item in the list typically shows the name of the other participant and the last message exchanged. Tapping on a conversation navigates the user to the ",(0,n.jsx)(t.code,{children:"ChatScreen"})," for that specific chat. This page also includes basic internet connectivity checking."]}),"\n",(0,n.jsxs)(t.h3,{id:"22-class-diagram-messagespage",children:["2.2. Class Diagram (",(0,n.jsx)(t.code,{children:"MessagesPage"}),")"]}),"\n",(0,n.jsx)(t.mermaid,{value:"classDiagram\n    direction LR\n    class MessagesPage {\n        +build(BuildContext context) Widget\n        #_checkInternet() Future<void>\n        #_buildChatList(String currentUserId) Widget\n        #_buildOfflineMessage() Widget\n    }\n    MessagesPage --|> StatefulWidget\n\n    class _MessagesPageState {\n        +isConnected: bool\n        +initState() void\n        +build(BuildContext context) Widget\n    }\n\n    _MessagesPageState --|> State_MessagesPage\n\n    class State_MessagesPage\n\n    class StreamBuilder {\n        +stream: Stream<QuerySnapshot>\n        +builder: Function\n    }\n\n    _MessagesPageState o-- StreamBuilder\n\n    class FutureBuilder {\n        +future: Future<DocumentSnapshot>\n        +builder: Function\n    }\n\n    _MessagesPageState o-- FutureBuilder\n\n    class ListTile\n\n    _MessagesPageState ..> ListTile\n\n    class Card\n\n    _MessagesPageState ..> Card\n\n    class FirebaseAuth {\n        +currentUser: User?\n        +instance: FirebaseAuth\n    }\n\n    _MessagesPageState ..> FirebaseAuth\n\n    class FirebaseFirestore {\n        +collection(String path) CollectionReference\n        +instance: FirebaseFirestore\n    }\n\n    _MessagesPageState ..> FirebaseFirestore\n\n    class Connectivity {\n        +checkConnectivity() Future<ConnectivityResult>\n        +onConnectivityChanged: Stream<List<ConnectivityResult>>\n    }\n\n    _MessagesPageState ..> Connectivity\n\n    class ChatScreen {\n        +chatId: String\n        +otherUserId: String\n    }\n\n    _MessagesPageState ..> Navigator\n\n    class Navigator\n\n    class QuerySnapshot\n\n    class DocumentSnapshot\n\n    class User\n\n    class ConnectivityResult"}),"\n",(0,n.jsx)(t.h4,{id:"key-relationships",children:"Key Relationships:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"MessagesPage"})," is a ",(0,n.jsx)(t.code,{children:"StatefulWidget"})," managing ",(0,n.jsx)(t.code,{children:"_MessagesPageState"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"_MessagesPageState"})," uses ",(0,n.jsx)(t.code,{children:"StreamBuilder"})," to listen to chat data from ",(0,n.jsx)(t.code,{children:"FirebaseFirestore"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["For each chat, it uses a ",(0,n.jsx)(t.code,{children:"FutureBuilder"})," to fetch the other participant's name from ",(0,n.jsx)(t.code,{children:"FirebaseFirestore"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["It uses ",(0,n.jsx)(t.code,{children:"FirebaseAuth"})," to get the current user's ID."]}),"\n",(0,n.jsxs)(t.li,{children:["It uses the ",(0,n.jsx)(t.code,{children:"connectivity_plus"})," package to check and monitor network status."]}),"\n",(0,n.jsxs)(t.li,{children:["Tapping a chat item navigates to the ",(0,n.jsx)(t.code,{children:"ChatScreen"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"23-sequence-diagram-loading-and-displaying-chats",children:"2.3. Sequence Diagram: Loading and Displaying Chats"}),"\n",(0,n.jsx)(t.mermaid,{value:"sequenceDiagram\n    participant User\n    participant MessagesPage\n    participant Connectivity\n    participant FirebaseAuth\n    participant FirebaseFirestore\n    participant ChatScreen\n\n    User->>MessagesPage: Navigates to Messages Page\n    activate MessagesPage\n    MessagesPage->>Connectivity: checkConnectivity()\n    activate Connectivity\n    Connectivity--\x3e>MessagesPage: returns connectivityResult\n    deactivate Connectivity\n    MessagesPage->>MessagesPage: setState(isConnected)\n\n    MessagesPage->>FirebaseAuth: instance.currentUser.uid\n    activate FirebaseAuth\n    FirebaseAuth--\x3e>MessagesPage: currentUserId\n    deactivate FirebaseAuth\n\n    alt isConnected is true\n        MessagesPage->>FirebaseFirestore: stream collection('chats').where('users', arrayContains: currentUserId)\n        activate FirebaseFirestore\n        FirebaseFirestore--\x3e>MessagesPage: Stream<QuerySnapshot> (chats)\n        loop For each chat in QuerySnapshot\n            MessagesPage->>FirebaseFirestore: get collection('users').doc(otherUserId)\n            FirebaseFirestore--\x3e>MessagesPage: Future<DocumentSnapshot> (otherUserDetails)\n            MessagesPage->>MessagesPage: Display chat item (with otherUserName, lastMessage)\n        end\n        deactivate FirebaseFirestore\n\n        User->>MessagesPage: Taps on a chat item\n        MessagesPage->>Navigator: push ChatScreen(chatId, otherUserId)\n        activate ChatScreen\n        deactivate ChatScreen\n    else isConnected is false\n        MessagesPage->>MessagesPage: Display \"No Internet Connection\"\n    end\n    deactivate MessagesPage"}),"\n",(0,n.jsx)(t.h3,{id:"24-state-management",children:"2.4. State Management"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"MessagesPage"})," primarily uses:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Local ",(0,n.jsx)(t.code,{children:"StatefulWidget"})," state (",(0,n.jsx)(t.code,{children:"isConnected"}),")."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"StreamBuilder"})," to reactively display the list of chats based on real-time data from ",(0,n.jsx)(t.code,{children:"FirebaseFirestore"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"FutureBuilder"})," nested within the ",(0,n.jsx)(t.code,{children:"StreamBuilder"}),"'s item builder to asynchronously fetch and display the names of other participants in each chat."]}),"\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"connectivity_plus"})," package stream to update the ",(0,n.jsx)(t.code,{children:"isConnected"})," state."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"No dedicated BLoC is used for this page; state is managed through Flutter's built-in mechanisms for handling asynchronous data and local UI state."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.h2,{id:"3-start-new-chat-sub-feature-newchatpage",children:["3. Start New Chat Sub-Feature (",(0,n.jsx)(t.code,{children:"NewChatPage"}),")"]}),"\n",(0,n.jsx)(t.h3,{id:"31-overview",children:"3.1. Overview"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"NewChatPage"})," allows the current user to browse a list of other registered users and initiate a new private chat conversation with any of them. If a chat already exists between the two users, it navigates to the existing ",(0,n.jsx)(t.code,{children:"ChatScreen"}),"; otherwise, it creates a new chat document in Firestore before navigating."]}),"\n",(0,n.jsxs)(t.h3,{id:"32-class-diagram-newchatpage",children:["3.2. Class Diagram (",(0,n.jsx)(t.code,{children:"NewChatPage"}),")"]}),"\n",(0,n.jsx)(t.mermaid,{value:"classDiagram\n    direction LR\n\n    class NewChatPage {\n        +build(BuildContext context) Widget\n        #_startChat(BuildContext context, String currentUserId, String otherUserId, String otherUserName) Future<void>\n    }\n    NewChatPage --|> StatelessWidget\n\n    class StreamBuilder {\n        +stream: Stream<QuerySnapshot>\n        +builder: Function\n    }\n    NewChatPage o-- StreamBuilder : uses to display users\n\n    class ListTile\n    NewChatPage ..> ListTile : uses for user items\n\n    class FirebaseAuth {\n        +currentUser: User?\n        +instance: FirebaseAuth\n    }\n    NewChatPage ..> FirebaseAuth : uses for currentUserId\n\n    class FirebaseFirestore {\n        +collection(String path) CollectionReference\n        +instance: FirebaseFirestore\n    }\n    NewChatPage ..> FirebaseFirestore : uses for querying users and chats\n\n    class ChatScreen {\n        +chatId: String\n        +otherUserId: String\n    }\n    NewChatPage ..> Navigator : navigates to ChatScreen\n\n    class QuerySnapshot\n    class User "}),"\n",(0,n.jsx)(t.h4,{id:"key-relationships-1",children:"Key Relationships:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"NewChatPage"})," is a ",(0,n.jsx)(t.code,{children:"StatelessWidget"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["It uses a ",(0,n.jsx)(t.code,{children:"StreamBuilder"})," to fetch and display a list of users from ",(0,n.jsx)(t.code,{children:"FirebaseFirestore"}),", excluding the current user."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"FirebaseAuth"})," is used to get the ",(0,n.jsx)(t.code,{children:"currentUserId"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"_startChat"})," method handles the logic of finding an existing chat or creating a new one in ",(0,n.jsx)(t.code,{children:"FirebaseFirestore"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Tapping a user navigates to the ",(0,n.jsx)(t.code,{children:"ChatScreen"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"33-sequence-diagram-starting-a-new-chat",children:"3.3. Sequence Diagram: Starting a New Chat"}),"\n",(0,n.jsx)(t.mermaid,{value:"sequenceDiagram\n    actor User\n    participant NewChatPage\n    participant FirebaseAuth\n    participant FirebaseFirestore\n    participant ChatScreen\n\n    User->>NewChatPage: Navigates to New Chat Page\n    activate NewChatPage\n    NewChatPage->>FirebaseAuth: instance.currentUser.uid\n    activate FirebaseAuth\n    FirebaseAuth--\x3e>NewChatPage: currentUserId\n    deactivate FirebaseAuth\n\n    NewChatPage->>FirebaseFirestore: stream collection('users')\n    activate FirebaseFirestore\n    FirebaseFirestore--\x3e>NewChatPage: Stream<QuerySnapshot> (allUsers)\n    NewChatPage->>NewChatPage: Filters out currentUserId, displays list of other users\n    deactivate FirebaseFirestore\n\n    User->>NewChatPage: Taps on a user to chat with\n    NewChatPage->>NewChatPage: _startChat(context, currentUserId, otherUserId, otherUserName)\n    activate FirebaseFirestore # For chat checking/creation\n    NewChatPage->>FirebaseFirestore: query collection('chats').where('users', arrayContains: currentUserId).where('users', arrayContains: otherUserId)\n    FirebaseFirestore--\x3e>NewChatPage: QuerySnapshot (existingChats)\n    alt Existing chat found\n        NewChatPage->>NewChatPage: chatId = existingChat.id\n    else No existing chat\n        NewChatPage->>FirebaseFirestore: add to collection('chats') data: {users: [currentUserId, otherUserId], ...}\n        FirebaseFirestore--\x3e>NewChatPage: newChatDocumentRef\n        NewChatPage->>NewChatPage: chatId = newChatDocumentRef.id\n    end\n    deactivate FirebaseFirestore\n    NewChatPage->>Navigator: push ChatScreen(chatId, otherUserId)\n    activate ChatScreen\n    deactivate ChatScreen\n    deactivate NewChatPage"}),"\n",(0,n.jsx)(t.h3,{id:"34-state-management",children:"3.4. State Management"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"NewChatPage"})," is a ",(0,n.jsx)(t.code,{children:"StatelessWidget"}),"."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["It uses ",(0,n.jsx)(t.code,{children:"StreamBuilder"})," to display the list of users reactively from ",(0,n.jsx)(t.code,{children:"FirebaseFirestore"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["The logic for finding or creating a chat room is encapsulated within the ",(0,n.jsx)(t.code,{children:"_startChat"})," method, which is called directly upon user interaction."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"No dedicated BLoC or complex local state management is employed for this page."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.h2,{id:"4-chat-screen-sub-feature-chatscreen",children:["4. Chat Screen Sub-Feature (",(0,n.jsx)(t.code,{children:"ChatScreen"}),")"]}),"\n",(0,n.jsx)(t.h3,{id:"41-overview",children:"4.1. Overview"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"ChatScreen"})," is the core messaging interface where users exchange text messages in real-time. It displays the history of messages in a conversation, ordered by time, and provides an input field for composing and sending new messages. User names for messages are fetched dynamically."]}),"\n",(0,n.jsxs)(t.h3,{id:"42-class-diagram-chatscreen",children:["4.2. Class Diagram (",(0,n.jsx)(t.code,{children:"ChatScreen"}),")"]}),"\n",(0,n.jsx)(t.mermaid,{value:"classDiagram\n    direction LR\n\n    class ChatScreen {\n        +chatId: String\n        +otherUserId: String\n        +build(BuildContext context) Widget\n    }\n    ChatScreen --|> StatefulWidget\n\n    class _ChatScreenState {\n        -_messageController: TextEditingController\n        -_auth: FirebaseAuth\n        -_firestore: FirebaseFirestore\n        +otherUserName: String\n        +initState() void\n        +sendMessage() Future<void>\n        #_getOtherUserName() Future<void>\n        +build(BuildContext context) Widget\n    }\n    _ChatScreenState --|> State\n\n    class TextEditingController\n    _ChatScreenState o-- TextEditingController\n\n    class StreamBuilder {\n        +stream: Stream<QuerySnapshot>\n        +builder: Function\n    }\n    _ChatScreenState o-- StreamBuilder : uses to display messages\n\n    class FutureBuilder {\n        +future: Future<DocumentSnapshot>\n        +builder: Function\n    }\n    _ChatScreenState o-- FutureBuilder : uses to get sender names (for each message)\n\n    class ListView\n    _ChatScreenState ..> ListView : uses to display messages\n    class TextField\n    _ChatScreenState ..> TextField : uses for message input\n    class IconButton\n    _ChatScreenState ..> IconButton : uses for send button\n\n    class FirebaseAuth {\n        +currentUser: User?\n        +instance: FirebaseAuth\n    }\n    _ChatScreenState ..> FirebaseAuth : uses\n\n    class FirebaseFirestore {\n        +collection(String path) CollectionReference\n        +doc(String path) DocumentReference\n        +instance: FirebaseFirestore\n    }\n    _ChatScreenState ..> FirebaseFirestore : uses\n\n    class QuerySnapshot\n    class DocumentSnapshot\n    class User \n    class Message { # Conceptual representation of message data\n        text: String\n        senderId: String\n        timestamp: FieldValue\n    }"}),"\n",(0,n.jsx)(t.h4,{id:"key-relationships-2",children:"Key Relationships:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"ChatScreen"})," is a ",(0,n.jsx)(t.code,{children:"StatefulWidget"})," managing ",(0,n.jsx)(t.code,{children:"_ChatScreenState"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"_ChatScreenState"})," holds a ",(0,n.jsx)(t.code,{children:"TextEditingController"})," for message input and references to ",(0,n.jsx)(t.code,{children:"FirebaseAuth"})," and ",(0,n.jsx)(t.code,{children:"FirebaseFirestore"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["It uses a ",(0,n.jsx)(t.code,{children:"StreamBuilder"})," to listen for real-time messages from the specified chat's ",(0,n.jsx)(t.code,{children:"messages"})," subcollection in Firestore."]}),"\n",(0,n.jsxs)(t.li,{children:["Within the message list, it uses ",(0,n.jsx)(t.code,{children:"FutureBuilder"})," to fetch the sender's name for each message (note: this could be optimized)."]}),"\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"sendMessage"})," method handles adding new messages to Firestore and updating the main chat document's ",(0,n.jsx)(t.code,{children:"lastMessage"})," field."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"43-sequence-diagram-sending-a-message",children:"4.3. Sequence Diagram: Sending a Message"}),"\n",(0,n.jsx)(t.mermaid,{value:"sequenceDiagram\n    actor User\n    participant ChatScreenState as _ChatScreenState\n    participant TextEditingController\n    participant FirebaseAuth\n    participant FirebaseFirestore\n\n    User->>ChatScreenState: Types message into TextField\n    ChatScreenState->>TextEditingController: text updated\n    User->>ChatScreenState: Taps \"Send\" IconButton\n    activate ChatScreenState\n    ChatScreenState->>FirebaseAuth: instance.currentUser\n    activate FirebaseAuth\n    FirebaseAuth--\x3e>ChatScreenState: currentUser\n    deactivate FirebaseAuth\n\n    ChatScreenState->>FirebaseFirestore: add to collection('chats/{chatId}/messages') data: {text, senderId, timestamp}\n    activate FirebaseFirestore\n    FirebaseFirestore--\x3e>ChatScreenState: (Success)\n    ChatScreenState->>FirebaseFirestore: update collection('chats').doc(chatId) data: {lastMessage, timestamp}\n    FirebaseFirestore--\x3e>ChatScreenState: (Success)\n    deactivate FirebaseFirestore\n\n    ChatScreenState->>TextEditingController: clear()\n    deactivate ChatScreenState"}),"\n",(0,n.jsx)(t.h3,{id:"44-sequence-diagram-receiving-messages",children:"4.4. Sequence Diagram: Receiving Messages"}),"\n",(0,n.jsx)(t.mermaid,{value:"sequenceDiagram\n    participant FirebaseFirestore\n    participant ChatScreenState as _ChatScreenState\n    participant ListView\n\n    ChatScreenState->>FirebaseFirestore: stream collection('chats/{chatId}/messages').orderBy('timestamp')\n    activate FirebaseFirestore\n    FirebaseFirestore--\x3e>ChatScreenState: Stream<QuerySnapshot> (messages)\n    deactivate FirebaseFirestore # Stream remains open\n\n    loop Firestore pushes new QuerySnapshot (new/updated message)\n        FirebaseFirestore->>ChatScreenState: New QuerySnapshot\n        activate ChatScreenState\n        ChatScreenState->>ListView: Rebuilds with new messages\n        activate ListView\n        loop For each message in QuerySnapshot\n            ChatScreenState->>FirebaseFirestore: get collection('users').doc(message.senderId)\n            activate FirebaseFirestore\n            FirebaseFirestore--\x3e>ChatScreenState: Future<DocumentSnapshot> (senderDetails)\n            deactivate FirebaseFirestore\n            ChatScreenState->>ListView: Displays message with senderName\n        end\n        deactivate ListView\n        deactivate ChatScreenState\n    end"}),"\n",(0,n.jsx)(t.h3,{id:"45-state-management",children:"4.5. State Management"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"ChatScreen"})," uses:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Local ",(0,n.jsx)(t.code,{children:"StatefulWidget"})," state to manage the ",(0,n.jsx)(t.code,{children:"TextEditingController"})," for the message input field (",(0,n.jsx)(t.code,{children:"_messageController"}),"), the other user's name (",(0,n.jsx)(t.code,{children:"otherUserName"}),"), and potentially loading states for fetching ",(0,n.jsx)(t.code,{children:"otherUserName"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"StreamBuilder"})," to reactively display the list of messages in real-time from ",(0,n.jsx)(t.code,{children:"FirebaseFirestore"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"FutureBuilder"})," within the message list item builder to fetch and display the sender's name for each message."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Similar to other chat components, it does not use a dedicated BLoC, relying on Flutter's built-in state management widgets for handling asynchronous data and UI updates."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"5-external-dependencies-for-chat-feature",children:"5. External Dependencies for Chat Feature"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.strong,{children:"Chat"})," feature relies on the following key external packages:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"cloud_firestore"})}),":","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Purpose"}),": Provides access to Google Cloud Firestore database."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Usage"}),": Used extensively across ",(0,n.jsx)(t.code,{children:"MessagesPage"}),", ",(0,n.jsx)(t.code,{children:"NewChatPage"}),", and ",(0,n.jsx)(t.code,{children:"ChatScreen"})," for storing, retrieving, and listening to real-time updates for chat rooms and messages. Also used to fetch user details (names)."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"firebase_auth"})}),":","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Purpose"}),": Handles user authentication with Firebase."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Usage"}),": Used in all chat components to get the ",(0,n.jsx)(t.code,{children:"currentUserId"})," for querying relevant chats/messages and identifying message senders."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"connectivity_plus"})}),":","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Purpose"}),": Allows checking the network connectivity status of the device."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Usage"}),": Used in ",(0,n.jsx)(t.code,{children:"MessagesPage"})," to display an offline message if the user has no internet connection, preventing attempts to load chats."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"These packages are fundamental to the chat feature's ability to provide real-time, persistent messaging."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}}}]);