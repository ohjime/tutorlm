"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6957],{8527:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>o,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"development/features/app","title":"App Overview","description":"The app feature encompasses the core functionalities and user interface of the application. (No specific GIFs were identified for this feature.)","source":"@site/docs/development/features/app.mdx","sourceDirName":"development/features","slug":"/development/features/app","permalink":"/tutorlm/docs/development/features/app","draft":false,"unlisted":false,"editUrl":"https://github.com/ohjime/tutorlm/tree/main/docs/docs/development/features/app.mdx","tags":[],"version":"current","lastUpdatedAt":1750659568000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"App Feature"},"sidebar":"developmentSidebar","previous":{"title":"Features","permalink":"/tutorlm/docs/development/features/"},"next":{"title":"Chat Feature","permalink":"/tutorlm/docs/development/features/chat"}}');var a=t(4848),s=t(8453);const r={sidebar_position:1,sidebar_label:"App Feature"},d="App Overview",c={},l=[{value:"Class Diagram",id:"class-diagram",level:2},{value:"Description",id:"description",level:2},{value:"AppBloc",id:"appbloc",level:3},{value:"AppEvent",id:"appevent",level:3},{value:"AppState",id:"appstate",level:3},{value:"Relationships",id:"relationships",level:3},{value:"Component Diagram",id:"component-diagram",level:2},{value:"View Details",id:"view-details",level:2},{value:"AppView",id:"appview",level:3},{value:"Sequence Diagram",id:"sequence-diagram",level:4},{value:"SplashPage",id:"splashpage",level:3},{value:"Sequence Diagram",id:"sequence-diagram-1",level:4},{value:"WelcomePage",id:"welcomepage",level:3},{value:"Sequence Diagram",id:"sequence-diagram-2",level:4}];function p(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"app-overview",children:"App Overview"})}),"\n",(0,a.jsx)(i.p,{children:"The app feature encompasses the core functionalities and user interface of the application. (No specific GIFs were identified for this feature.)"}),"\n",(0,a.jsx)(i.h1,{id:"app-state-machine",children:"App State Machine"}),"\n",(0,a.jsxs)(i.p,{children:["This document provides an overview of the classes in the ",(0,a.jsx)(i.code,{children:"app/bloc"})," directory, along with their relationships, represented as class diagrams using Mermaid syntax."]}),"\n",(0,a.jsx)(i.h2,{id:"class-diagram",children:"Class Diagram"}),"\n",(0,a.jsx)(i.mermaid,{value:"classDiagram\n    class AppBloc {\n        - AuthenticationRepository _authenticationRepository\n        - UserRepository _userRepository\n        + AppBloc(AuthenticationRepository authenticationRepository, UserRepository userRepository)\n        + _onCredentialSubscriptionRequested(CredentialSubscriptionRequested event, Emitter<AppState> emit)\n        + _onLogoutPressed(LogoutPressed event, Emitter<AppState> emit)\n        + _onVerifyOnboardingStatus(VerifyOnboardingStatus event, Emitter<AppState> emit)\n    }\n\n    class AppEvent {\n        <<abstract>>\n    }\n    class CredentialSubscriptionRequested {\n        + CredentialSubscriptionRequested()\n    }\n    class LogoutPressed {\n        + LogoutPressed()\n    }\n    class VerifyOnboardingStatus {\n        + VerifyOnboardingStatus()\n    }\n\n    AppEvent <|-- CredentialSubscriptionRequested\n    AppEvent <|-- LogoutPressed\n    AppEvent <|-- VerifyOnboardingStatus\n\n    class AppState {\n        <<abstract>>\n        + List<Object?> get props\n    }\n    class Starting {\n        + Starting()\n    }\n    class Unauthenticated {\n        + Unauthenticated()\n    }\n    class Authenticated {\n        + Authenticated(AuthCredential credential)\n        + AuthCredential credential\n    }\n    class OnboardingRequired {\n        + OnboardingRequired(AuthCredential credential)\n    }\n\n    AppState <|-- Starting\n    AppState <|-- Unauthenticated\n    AppState <|-- Authenticated\n    Authenticated <|-- OnboardingRequired\n\n    AppBloc --\x3e AppEvent\n    AppBloc --\x3e AppState"}),"\n",(0,a.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(i.h3,{id:"appbloc",children:"AppBloc"}),"\n",(0,a.jsxs)(i.p,{children:["The ",(0,a.jsx)(i.code,{children:"AppBloc"})," class is the main Bloc for managing the application's state. It listens to events and updates the state accordingly. The key events handled by ",(0,a.jsx)(i.code,{children:"AppBloc"})," include:"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"CredentialSubscriptionRequested"}),": Subscribes to the authentication repository's credential stream."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"LogoutPressed"}),": Handles user logout."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"VerifyOnboardingStatus"}),": Verifies the onboarding status of the current user."]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"appevent",children:"AppEvent"}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.code,{children:"AppEvent"})," is the base class for all events in the ",(0,a.jsx)(i.code,{children:"AppBloc"}),". Specific events extend this class to handle different actions within the application."]}),"\n",(0,a.jsx)(i.h3,{id:"appstate",children:"AppState"}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.code,{children:"AppState"})," is the base class for all states in the ",(0,a.jsx)(i.code,{children:"AppBloc"}),". Specific states extend this class to represent different stages of the application's lifecycle. Examples include:"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"Starting"}),": Represents the initial state of the application."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"Unauthenticated"}),": Represents the state when the user is not authenticated."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"Authenticated"}),": Represents the state when the user is authenticated. This state is further extended by ",(0,a.jsx)(i.code,{children:"OnboardingRequired"})," to indicate that the user requires onboarding."]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"relationships",children:"Relationships"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"AppBloc"})," depends on ",(0,a.jsx)(i.code,{children:"AppEvent"})," and ",(0,a.jsx)(i.code,{children:"AppState"})," to manage the application's state."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"AppEvent"})," is extended by specific events like ",(0,a.jsx)(i.code,{children:"CredentialSubscriptionRequested"}),", ",(0,a.jsx)(i.code,{children:"LogoutPressed"}),", and ",(0,a.jsx)(i.code,{children:"VerifyOnboardingStatus"}),"."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"AppState"})," is extended by specific states like ",(0,a.jsx)(i.code,{children:"Starting"}),", ",(0,a.jsx)(i.code,{children:"Unauthenticated"}),", and ",(0,a.jsx)(i.code,{children:"Authenticated"}),". The ",(0,a.jsx)(i.code,{children:"Authenticated"})," state is further extended by ",(0,a.jsx)(i.code,{children:"OnboardingRequired"}),"."]}),"\n"]}),"\n",(0,a.jsx)(i.h1,{id:"app-views",children:"App Views"}),"\n",(0,a.jsxs)(i.p,{children:["This document provides an overview of the views (screens/pages) in the ",(0,a.jsx)(i.code,{children:"lib/app/view"})," directory. Each view plays a unique role in the application, and this document explores their relationships, interactions, and behaviors in a conversational manner."]}),"\n",(0,a.jsx)(i.h2,{id:"component-diagram",children:"Component Diagram"}),"\n",(0,a.jsx)(i.mermaid,{value:"flowchart TD\n    AppView --\x3e SplashPage\n    SplashPage --\x3e WelcomePage\n    WelcomePage --\x3e AppView\n\n    subgraph AppView\n        direction TB\n        AppBloc\n    end\n\n    subgraph SplashPage\n        direction TB\n        CircularProgressIndicator\n    end\n\n    subgraph WelcomePage\n        direction TB\n        AnimatedTextKit\n        DelayedDisplay\n    end"}),"\n",(0,a.jsx)(i.h2,{id:"view-details",children:"View Details"}),"\n",(0,a.jsx)(i.h3,{id:"appview",children:"AppView"}),"\n",(0,a.jsxs)(i.p,{children:["The ",(0,a.jsx)(i.code,{children:"AppView"})," serves as the backbone of the application. It is responsible for managing navigation and providing the ",(0,a.jsx)(i.code,{children:"AppBloc"})," to the widget tree. This view listens to the ",(0,a.jsx)(i.code,{children:"AppBloc"})," and reacts to its states. For instance, when the user is unauthenticated, the ",(0,a.jsx)(i.code,{children:"AppView"})," navigates to the welcome screen. If onboarding is required, it redirects to the signup page. And finally, if the user is onboarded, it takes them to the home screen. The lifecycle of ",(0,a.jsx)(i.code,{children:"AppView"})," is tightly coupled with the initialization of the ",(0,a.jsx)(i.code,{children:"AppBloc"}),", ensuring that authentication events are handled seamlessly."]}),"\n",(0,a.jsx)(i.h4,{id:"sequence-diagram",children:"Sequence Diagram"}),"\n",(0,a.jsx)(i.mermaid,{value:"sequenceDiagram\n    participant User\n    participant AppView\n    participant AppBloc\n    participant Navigator\n\n    User->>AppView: Launch App\n    AppView->>AppBloc: Dispatch CredentialSubscriptionRequested\n    AppBloc->>AppView: Emit Unauthenticated\n    AppView->>Navigator: Navigate to /welcome"}),"\n",(0,a.jsx)(i.h3,{id:"splashpage",children:"SplashPage"}),"\n",(0,a.jsxs)(i.p,{children:["The ",(0,a.jsx)(i.code,{children:"SplashPage"})," is a simple yet essential part of the application. It provides a loading indicator while the app initializes. Although it does not interact with any blocs, its primary role is to offer visual feedback to the user during the initialization phase. Once the initialization is complete, the ",(0,a.jsx)(i.code,{children:"SplashPage"})," navigates to the ",(0,a.jsx)(i.code,{children:"WelcomePage"}),". This view is stateless, making it lightweight and efficient."]}),"\n",(0,a.jsx)(i.h4,{id:"sequence-diagram-1",children:"Sequence Diagram"}),"\n",(0,a.jsx)(i.mermaid,{value:"sequenceDiagram\n    participant App\n    participant SplashPage\n    participant Navigator\n\n    App->>SplashPage: Initialize\n    SplashPage->>Navigator: Navigate to WelcomePage"}),"\n",(0,a.jsx)(i.h3,{id:"welcomepage",children:"WelcomePage"}),"\n",(0,a.jsxs)(i.p,{children:["The ",(0,a.jsx)(i.code,{children:"WelcomePage"})," is the first point of interaction for unauthenticated users. It is designed to captivate users with branding and animations, creating a memorable first impression. This view does not listen to any blocs but uses animations like ",(0,a.jsx)(i.code,{children:"AnimatedTextKit"})," and ",(0,a.jsx)(i.code,{children:"DelayedDisplay"})," to enhance user engagement. When the user interacts with the ",(0,a.jsx)(i.code,{children:"WelcomePage"}),', such as tapping the "Get Started" button, it navigates back to the ',(0,a.jsx)(i.code,{children:"AppView"}),"."]}),"\n",(0,a.jsx)(i.h4,{id:"sequence-diagram-2",children:"Sequence Diagram"}),"\n",(0,a.jsx)(i.mermaid,{value:"sequenceDiagram\n    participant User\n    participant WelcomePage\n    participant Navigator\n\n    User->>WelcomePage: Tap Get Started\n    WelcomePage->>Navigator: Navigate to AppView"})]})}function o(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);