"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4105],{3218:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"development/domain","title":"Domain Layer Documentation","description":"Overview","source":"@site/docs/development/domain.mdx","sourceDirName":"development","slug":"/development/domain","permalink":"/tutorlm/docs/development/domain","draft":false,"unlisted":false,"editUrl":"https://github.com/ohjime/tutorlm/tree/main/docs/docs/development/domain.mdx","tags":[],"version":"current","lastUpdatedAt":1748802124000,"sidebarPosition":1,"frontMatter":{"id":"domain","sidebar_position":1,"sidebar_label":"Domain Layer"},"sidebar":"developmentSidebar","previous":{"title":"Development Overview","permalink":"/tutorlm/docs/development/"},"next":{"title":"Features","permalink":"/tutorlm/docs/development/features/"}}');var r=n(4848),d=n(8453);const t={id:"domain",sidebar_position:1,sidebar_label:"Domain Layer"},l="Domain Layer Documentation",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Entity Relationships and Firestore Schema",id:"entity-relationships-and-firestore-schema",level:2},{value:"Firestore Collections and Schema",id:"firestore-collections-and-schema",level:3},{value:"Entity Relationship Diagram (ERD - Conceptual)",id:"entity-relationship-diagram-erd---conceptual",level:3},{value:"Design Rationale and Key Structures",id:"design-rationale-and-key-structures",level:3},{value:"Data Layer Services (External Dependencies)",id:"data-layer-services-external-dependencies",level:2},{value:"<code>Firebase Firestore</code>",id:"firebase-firestore",level:3},{value:"<code>Firebase Authentication</code>",id:"firebase-authentication",level:3},{value:"<code>Firebase Storage</code>",id:"firebase-storage",level:3},{value:"<code>Google Sign-In</code>",id:"google-sign-in",level:3},{value:"Domain Models (<code>lib/core/models/</code>)",id:"domain-models-libcoremodels",level:2},{value:"<code>AcademicCredential</code>",id:"academiccredential",level:3},{value:"<code>AppMode</code>",id:"appmode",level:3},{value:"<code>AuthCredential</code>",id:"authcredential",level:3},{value:"<code>ChatRoom</code>",id:"chatroom",level:3},{value:"<code>Course</code>",id:"course",level:3},{value:"<code>Grade</code>",id:"grade",level:3},{value:"<code>Message</code>",id:"message",level:3},{value:"<code>Schedule</code>",id:"schedule",level:3},{value:"<code>Session</code>",id:"session",level:3},{value:"<code>SessionListFilter</code>",id:"sessionlistfilter",level:3},{value:"<code>SessionStatus</code>",id:"sessionstatus",level:3},{value:"<code>Student</code>",id:"student",level:3},{value:"<code>Subject</code>",id:"subject",level:3},{value:"<code>TimeSlot</code>",id:"timeslot",level:3},{value:"<code>Tutor</code>",id:"tutor",level:3},{value:"<code>User</code>",id:"user",level:3},{value:"<code>UserRole</code>",id:"userrole",level:3},{value:"Repositories (<code>lib/core/repositories/</code>)",id:"repositories-libcorerepositories",level:2},{value:"<code>AuthenticationRepository</code>",id:"authenticationrepository",level:3},{value:"<code>ChatRepository</code>",id:"chatrepository",level:3},{value:"<code>SessionRepository</code>",id:"sessionrepository",level:3},{value:"<code>StorageRepository</code>",id:"storagerepository",level:3},{value:"<code>StudentRepository</code>",id:"studentrepository",level:3},{value:"<code>TutorRepository</code>",id:"tutorrepository",level:3},{value:"<code>UserRepository</code>",id:"userrepository",level:3}];function a(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"domain-layer-documentation",children:"Domain Layer Documentation"})}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(s.p,{children:"The Domain Layer is a crucial part of the application's core, responsible for managing the business logic and data entities. It primarily consists of:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Data Layer Services & Schema:"})," This refers to the external backend services (like Firebase) and the defined structure (schema) of how data is organized and stored within those services, particularly Firestore."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Domain Models:"})," These are the Dart classes that represent the core entities and value objects of the application (e.g., ",(0,r.jsx)(s.code,{children:"User"}),", ",(0,r.jsx)(s.code,{children:"Session"}),", ",(0,r.jsx)(s.code,{children:"Tutor"}),"), mirroring the Firestore schema."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Repositories:"})," These act as intermediaries between the application's use cases (often driven by BLoCs or Cubits in the feature layers) and the data sources, providing a clean API to interact with the domain models and abstracting the direct interaction with the Data Layer Services."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This document details these components, outlining their responsibilities and interactions."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"entity-relationships-and-firestore-schema",children:"Entity Relationships and Firestore Schema"}),"\n",(0,r.jsx)(s.p,{children:"This section describes the structure of data as it's stored in Firebase Firestore, inferred from your Dart domain models. It also explains the relationships between these data entities."}),"\n",(0,r.jsx)(s.h3,{id:"firestore-collections-and-schema",children:"Firestore Collections and Schema"}),"\n",(0,r.jsx)(s.p,{children:"Based on the provided Dart models, the anticipated Firestore schema is as follows:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"users"})," Collection:"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Document ID:"})," ",(0,r.jsx)(s.code,{children:"uid"})," (matches Firebase Authentication UID)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Stores general information applicable to all users, regardless of their role. This centralized approach avoids data duplication for common attributes."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Fields:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"email"}),": (String) User's email address."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"name"}),": (String) User's full name."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"imageUrl"}),": (String, nullable) URL to the user's profile picture."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"coverUrl"}),": (String, nullable) URL to the user's cover image."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"role"}),': (String) The user\'s role (e.g., "tutor", "student", "unknown").']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"schedule"}),": (Map, nullable) Represents the ",(0,r.jsx)(s.code,{children:"Schedule"})," model, storing ",(0,r.jsx)(s.code,{children:"year"})," (int), ",(0,r.jsx)(s.code,{children:"month"})," (int), and ",(0,r.jsx)(s.code,{children:"slots"})," (List of ",(0,r.jsx)(s.code,{children:"TimeSlot"})," maps, where each ",(0,r.jsx)(s.code,{children:"TimeSlot"})," map contains ",(0,r.jsx)(s.code,{children:"start"})," and ",(0,r.jsx)(s.code,{children:"end"})," as ISO DateTime strings)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"isAdmin"}),": (Boolean) Flag indicating if the user has administrative privileges."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"tutors"})," Collection:"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Document ID:"})," ",(0,r.jsx)(s.code,{children:"uid"})," (matches the ",(0,r.jsx)(s.code,{children:"uid"})," in the ",(0,r.jsx)(s.code,{children:"users"})," collection for a user with the 'tutor' role)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Stores profile information specific to users who are tutors."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Fields:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"uid"}),": (String) Primary key, same as the user's auth UID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"bio"}),": (String) A short biography of the tutor."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"headline"}),": (String) A catchy headline for the tutor's profile."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"courses"}),": (List of Maps) Each map represents a ",(0,r.jsx)(s.code,{children:"Course"})," model (e.g., ",(0,r.jsx)(s.code,{children:'{"subjectType": "math", "generalLevel": "ten"}'}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"tutorStatus"}),': (String) e.g., "active", "inactive".']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"academicCredentials"}),": (List of Maps) Each map represents an ",(0,r.jsx)(s.code,{children:"AcademicCredential"})," model."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"students"})," Collection:"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Document ID:"})," ",(0,r.jsx)(s.code,{children:"uid"})," (matches the ",(0,r.jsx)(s.code,{children:"uid"})," in the ",(0,r.jsx)(s.code,{children:"users"})," collection for a user with the 'student' role)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Stores profile information specific to users who are students."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Fields:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"uid"}),": (String) Primary key, same as the user's auth UID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"bio"}),": (String) A short biography of the student."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"headline"}),": (String) A profile headline for the student."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"status"}),': (String) e.g., "active", "inactive".']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"courses"}),": (List of Maps) Each map represents a ",(0,r.jsx)(s.code,{children:"Course"})," model the student is interested in."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"gradeLevel"}),': (String) The student\'s current grade (e.g., "ten", "undergraduate").']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"educationInstitute"}),": (String) The name of the student's educational institution."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"sessions"})," Collection:"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Document ID:"})," Auto-generated by Firestore."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents scheduled tutoring sessions."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Fields:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"id"}),": (String) Copy of the Firestore document ID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"timeslot"}),": (Map) Represents the ",(0,r.jsx)(s.code,{children:"TimeSlot"})," model (e.g., ",(0,r.jsx)(s.code,{children:'{"start": "ISO_DATETIME_STRING", "end": "ISO_DATETIME_STRING", "name": "Optional Name"}'}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"tutorId"}),": (String) UID of the tutor (references ",(0,r.jsx)(s.code,{children:"users.uid"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"studentId"}),": (String) UID of the student (references ",(0,r.jsx)(s.code,{children:"users.uid"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"status"}),': (String) e.g., "scheduled", "completed".']}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"chatRooms"})," Collection:"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Document ID:"})," Auto-generated by Firestore."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a dedicated chat channel."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Fields:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"id"}),": (String) Copy of the Firestore document ID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"tutorId"}),": (String) UID of the tutor participant."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"studentId"}),": (String) UID of the student participant."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"tutorName"}),": (String) Denormalized name of the tutor."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"studentName"}),": (String) Denormalized name of the student."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sessionId"}),": (String, nullable) ID of the ",(0,r.jsx)(s.code,{children:"Session"})," this chat is linked to (references ",(0,r.jsx)(s.code,{children:"sessions.id"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"lastMessage"}),": (String, nullable) Content of the last message."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"lastMessageTimestamp"}),": (Timestamp, nullable) Timestamp of the last message."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"participants"}),": (List of Strings) Array containing ",(0,r.jsx)(s.code,{children:"tutorId"})," and ",(0,r.jsx)(s.code,{children:"studentId"})," for querying."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"isActive"}),": (Boolean)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"createdAt"}),": (Timestamp)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsxs)(s.strong,{children:["Subcollection: ",(0,r.jsx)(s.code,{children:"messages"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Document ID:"})," Auto-generated by Firestore."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Stores individual messages within a ",(0,r.jsx)(s.code,{children:"ChatRoom"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Fields:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"id"}),": (String) Copy of the Firestore document ID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"senderId"}),": (String) UID of the message sender."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"senderName"}),": (String) Denormalized name of the sender."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"content"}),": (String) Message text."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"timestamp"}),": (Timestamp)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"isRead"}),": (Boolean)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"messageType"}),': (String) e.g., "text".']}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"entity-relationship-diagram-erd---conceptual",children:"Entity Relationship Diagram (ERD - Conceptual)"}),"\n",(0,r.jsx)(s.p,{children:"This diagram illustrates the relationships between the main Firestore collections."}),"\n",(0,r.jsx)(s.mermaid,{value:'erDiagram\n    USERS {\n        string uid PK "User ID (Auth UID)"\n        string email\n        string name\n        string imageUrl "Nullable"\n        string coverUrl "Nullable"\n        string role\n        map schedule "Nullable, contains TimeSlots"\n        bool isAdmin\n    }\n\n    TUTORS {\n        string uid PK "FK to USERS.uid"\n        string bio\n        string headline\n        list courses "List of Course maps"\n        string tutorStatus\n        list academicCredentials "List of AcademicCredential maps"\n    }\n\n    STUDENTS {\n        string uid PK "FK to USERS.uid"\n        string bio\n        string headline\n        string status\n        list courses "List of Course maps"\n        string gradeLevel\n        string educationInstitute\n    }\n\n    SESSIONS {\n        string id PK "Session ID (Auto-generated)"\n        map timeslot "TimeSlot map"\n        string tutorId FK "FK to USERS.uid"\n        string studentId FK "FK to USERS.uid"\n        string status\n    }\n\n    CHAT_ROOMS {\n        string id PK "ChatRoom ID (Auto-generated)"\n        string tutorId FK "FK to USERS.uid"\n        string studentId FK "FK to USERS.uid"\n        string tutorName\n        string studentName\n        string sessionId FK "FK to SESSIONS.id (optional)"\n        string lastMessage "Nullable"\n        timestamp lastMessageTimestamp "Nullable"\n        list participants "Array of UIDs"\n        bool isActive\n        timestamp createdAt\n    }\n\n    MESSAGES {\n        string id PK "Message ID (Auto-generated)"\n        string senderId FK "FK to USERS.uid"\n        string senderName\n        string content\n        timestamp timestamp\n        bool isRead\n        string messageType\n    }\n\n    USERS ||--o{ TUTORS : "defines details for (if role=\'tutor\')"\n    USERS ||--o{ STUDENTS : "defines details for (if role=\'student\')"\n    SESSIONS }o--|| USERS : "booked by (student)"\n    SESSIONS }o--|| USERS : "conducted by (tutor)"\n    CHAT_ROOMS }o--|| USERS : "includes (tutor)"\n    CHAT_ROOMS }o--|| USERS : "includes (student)"\n    SESSIONS ||..o{ CHAT_ROOMS : "may be associated with"\n    CHAT_ROOMS ||--|{ MESSAGES : "contains"\n    MESSAGES }o--|| USERS : "sent by"'}),"\n",(0,r.jsx)(s.h3,{id:"design-rationale-and-key-structures",children:"Design Rationale and Key Structures"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Separation of Authentication and User Profile (",(0,r.jsx)(s.code,{children:"AuthCredential"})," vs. ",(0,r.jsx)(s.code,{children:"User"})," model):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Firebase Authentication handles the actual authentication process (verifying credentials, issuing tokens). The ",(0,r.jsx)(s.code,{children:"AuthCredential"})," model in your Dart code likely represents the data directly from Firebase Auth (like UID, email from provider)."]}),"\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"users"})," collection in Firestore (represented by your ",(0,r.jsx)(s.code,{children:"User"})," Dart model) stores your application-specific user profile. This profile is created ",(0,r.jsx)(s.em,{children:"after"})," successful authentication and can include much richer information (custom name, roles, application-specific settings, profile picture URLs managed by your app's storage, ",(0,r.jsx)(s.code,{children:"Schedule"})," data, etc.) than what Firebase Auth typically stores."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Why separate?"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Flexibility:"})," Your application's user profile can evolve independently of Firebase Auth's user object."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Rich Data:"})," You can store complex, structured data related to a user that doesn't fit into the standard Firebase Auth user properties."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Security:"})," Keeps sensitive application data separate from the primary authentication record."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Separation of General User Profile (",(0,r.jsx)(s.code,{children:"users"}),") from Role-Specific Profiles (",(0,r.jsx)(s.code,{children:"tutors"}),", ",(0,r.jsx)(s.code,{children:"students"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"users"})," collection holds data common to ",(0,r.jsx)(s.em,{children:"all"})," users (e.g., ",(0,r.jsx)(s.code,{children:"name"}),", ",(0,r.jsx)(s.code,{children:"email"}),", ",(0,r.jsx)(s.code,{children:"role"}),", ",(0,r.jsx)(s.code,{children:"imageUrl"}),", ",(0,r.jsx)(s.code,{children:"schedule"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"tutors"})," and ",(0,r.jsx)(s.code,{children:"students"})," collections store data unique to each role. They are linked to the ",(0,r.jsx)(s.code,{children:"users"})," collection via the shared ",(0,r.jsx)(s.code,{children:"uid"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Why separate?"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Data Integrity & Relevance:"}),' Avoids having many nullable fields in a single "uber-profile" collection. A student document won\'t have fields like ',(0,r.jsx)(s.code,{children:"academicCredentials"}),", and a tutor document won't have ",(0,r.jsx)(s.code,{children:"gradeLevel"})," (as a student property)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Scalability & Query Performance:"})," Queries for role-specific information can be targeted directly at the relevant collection."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Clearer Model:"})," Makes the domain models (",(0,r.jsx)(s.code,{children:"User"}),", ",(0,r.jsx)(s.code,{children:"Tutor"}),", ",(0,r.jsx)(s.code,{children:"Student"})," in Dart) cleaner and more focused."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Shared Properties in ",(0,r.jsx)(s.code,{children:"User"})," Collection (Profile Pictures, Schedule):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Attributes like ",(0,r.jsx)(s.code,{children:"imageUrl"}),", ",(0,r.jsx)(s.code,{children:"coverUrl"}),", and ",(0,r.jsx)(s.code,{children:"schedule"})," are placed in the ",(0,r.jsx)(s.code,{children:"users"})," collection because they are considered common functionalities that any user might utilize, regardless of their primary role as a tutor or student."]}),"\n",(0,r.jsxs)(s.li,{children:["For instance, both tutors and students have a profile picture. A tutor's ",(0,r.jsx)(s.code,{children:"schedule"})," represents their availability, while a student's ",(0,r.jsx)(s.code,{children:"schedule"})," might reflect their booked sessions or general study availability."]}),"\n",(0,r.jsxs)(s.li,{children:["Placing these in ",(0,r.jsx)(s.code,{children:"users"})," centralizes common data, reducing redundancy and simplifying updates to these shared aspects."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"TimeSlot"})," Structure and ",(0,r.jsx)(s.code,{children:"Schedule"})," Model:"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A ",(0,r.jsx)(s.code,{children:"TimeSlot"})," is defined by a ",(0,r.jsx)(s.code,{children:"start"})," and ",(0,r.jsx)(s.code,{children:"end"})," ",(0,r.jsx)(s.code,{children:"DateTime"}),". This is a fundamental representation for any schedulable block of time."]}),"\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"Schedule"})," model (stored as a map within a ",(0,r.jsx)(s.code,{children:"User"})," document) groups a list of these ",(0,r.jsx)(s.code,{children:"TimeSlot"}),"s, typically organized by ",(0,r.jsx)(s.code,{children:"year"})," and ",(0,r.jsx)(s.code,{children:"month"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Benefits:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Availability Checking:"})," When a student wants to book a session, the system can fetch the tutor's ",(0,r.jsx)(s.code,{children:"schedule"})," (list of available ",(0,r.jsx)(s.code,{children:"TimeSlot"}),"s) for the relevant period. Checking if a requested time overlaps with existing ",(0,r.jsx)(s.code,{children:"TimeSlot"}),"s becomes a straightforward comparison."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Sorting & Display:"})," A list of ",(0,r.jsx)(s.code,{children:"TimeSlot"}),"s can be easily sorted by their ",(0,r.jsx)(s.code,{children:"start"})," time, which is essential for displaying available slots or booked sessions chronologically."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Conflict Detection:"})," The ",(0,r.jsx)(s.code,{children:"overlaps"})," method in your ",(0,r.jsx)(s.code,{children:"TimeSlot"})," Dart model is crucial for preventing double bookings or scheduling conflicts."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Granularity:"})," This structure allows for precise time management. While your current implementation might focus on hourly slots, the ",(0,r.jsx)(s.code,{children:"start"})," and ",(0,r.jsx)(s.code,{children:"end"})," ",(0,r.jsx)(s.code,{children:"DateTime"}),"s can represent any duration."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Firestore Storage:"})," Storing ",(0,r.jsx)(s.code,{children:"DateTime"}),"s as ISO strings or Firestore Timestamps within the ",(0,r.jsx)(s.code,{children:"TimeSlot"})," map is standard and allows for date-based queries (though complex overlap queries directly in Firestore are limited)."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"ChatRoom"})," and ",(0,r.jsx)(s.code,{children:"Messages"})," Subcollection:"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A ",(0,r.jsx)(s.code,{children:"ChatRoom"})," document establishes a unique conversation channel between two users (identified by ",(0,r.jsx)(s.code,{children:"tutorId"})," and ",(0,r.jsx)(s.code,{children:"studentId"}),"). The ",(0,r.jsx)(s.code,{children:"participants"}),' array (containing both UIDs) is vital for Firestore queries like "find all chat rooms where ',(0,r.jsx)(s.code,{children:"currentUser.uid"})," is in ",(0,r.jsx)(s.code,{children:"participants"}),'".']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"Messages"})," are stored as a subcollection under their respective ",(0,r.jsx)(s.code,{children:"ChatRoom"}),' document. This is a highly recommended Firestore pattern for one-to-many relationships where the "many" side (messages) can grow large.']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Benefits:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Scalability:"})," Chat rooms can have many messages without making the ",(0,r.jsx)(s.code,{children:"ChatRoom"})," document itself too large (Firestore documents have a 1MB size limit)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Query Efficiency:"})," When fetching messages for a specific chat, you only query that chat's ",(0,r.jsx)(s.code,{children:"messages"})," subcollection, which is much more efficient than querying a global ",(0,r.jsx)(s.code,{children:"messages"})," collection and filtering by ",(0,r.jsx)(s.code,{children:"chatRoomId"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["This schema design aims to balance data normalization (reducing redundancy) with denormalization (e.g., ",(0,r.jsx)(s.code,{children:"tutorName"}),", ",(0,r.jsx)(s.code,{children:"studentName"})," in ",(0,r.jsx)(s.code,{children:"ChatRoom"})," for faster reads) to support common query patterns and application features efficiently."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"data-layer-services-external-dependencies",children:"Data Layer Services (External Dependencies)"}),"\n",(0,r.jsx)(s.p,{children:"The repositories in the domain layer interact with several external backend services to persist and retrieve data, handle authentication, and manage file storage. These services form the actual data layer that the repositories abstract."}),"\n",(0,r.jsx)(s.h3,{id:"firebase-firestore",children:(0,r.jsx)(s.code,{children:"Firebase Firestore"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," A NoSQL document database used for storing and syncing data in real-time."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Usage by Repositories:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ChatRepository"}),": Stores ",(0,r.jsx)(s.code,{children:"ChatRoom"})," and ",(0,r.jsx)(s.code,{children:"Message"})," documents."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SessionRepository"}),": Stores ",(0,r.jsx)(s.code,{children:"Session"})," documents."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"StudentRepository"}),": Stores ",(0,r.jsx)(s.code,{children:"Student"})," profile documents."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"TutorRepository"}),": Stores ",(0,r.jsx)(s.code,{children:"Tutor"})," profile documents."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"UserRepository"}),": Stores general ",(0,r.jsx)(s.code,{children:"User"})," profile documents."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Interactions:"})," Creating, reading, updating, deleting documents (CRUD operations), and listening to real-time updates for collections."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"firebase-authentication",children:(0,r.jsx)(s.code,{children:"Firebase Authentication"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Provides backend services for user authentication, supporting various sign-in methods."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Usage by Repositories:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"AuthenticationRepository"}),": Manages user sign-up with email/password, sign-in with email/password, sign-out, password reset, and listens to authentication state changes. It also handles credential management after social sign-ins (like Google)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Interactions:"})," User creation, sign-in, sign-out, token management, and auth state observation."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"firebase-storage",children:(0,r.jsx)(s.code,{children:"Firebase Storage"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Provides secure and scalable object storage for files like images, audio, or videos."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Usage by Repositories:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"StorageRepository"}),": Manages uploading files (e.g., user profile images, academic credential scans) and retrieving their download URLs."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Interactions:"})," File uploads, obtaining download URLs."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"google-sign-in",children:(0,r.jsx)(s.code,{children:"Google Sign-In"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," A specific authentication provider that allows users to sign in using their Google accounts."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Usage by Repositories:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"AuthenticationRepository"}),": Integrates with the Google Sign-In SDK to initiate the Google authentication flow and then uses the obtained credentials to sign the user into Firebase Authentication."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Interactions:"})," Initiating Google sign-in flow, obtaining Google user credentials (ID token, access token)."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h2,{id:"domain-models-libcoremodels",children:["Domain Models (",(0,r.jsx)(s.code,{children:"lib/core/models/"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"This section describes the primary data structures (models) used throughout the application. These models define the entities and value objects that the application manipulates and stores."}),"\n",(0,r.jsx)(s.h3,{id:"academiccredential",children:(0,r.jsx)(s.code,{children:"AcademicCredential"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents an academic qualification or achievement of a tutor."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"institution"})," (String), ",(0,r.jsx)(s.code,{children:"level"})," (AcademicCredentialLevel enum), ",(0,r.jsx)(s.code,{children:"fieldOfStudy"})," (String), ",(0,r.jsx)(s.code,{children:"focus"})," (String), ",(0,r.jsx)(s.code,{children:"dateIssued"})," (DateTime), ",(0,r.jsx)(s.code,{children:"imageUrl"})," (String - for a scanned copy)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Related Enum:"})," ",(0,r.jsx)(s.code,{children:"AcademicCredentialLevel"})," (highschool, certificate, diploma, bachelor, masters, doctorate)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"appmode",children:(0,r.jsx)(s.code,{children:"AppMode"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," An enum to define the operational mode of the application, distinguishing between standard user access and administrative functionalities."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Values:"})," ",(0,r.jsx)(s.code,{children:"admin"}),", ",(0,r.jsx)(s.code,{children:"user"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"authcredential",children:(0,r.jsx)(s.code,{children:"AuthCredential"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents the authentication credentials of a user, primarily obtained from Firebase Authentication."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"id"})," (String - user's unique ID), ",(0,r.jsx)(s.code,{children:"email"})," (String?)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"chatroom",children:(0,r.jsx)(s.code,{children:"ChatRoom"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a conversation session between two users (typically a tutor and a student)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"id"})," (String), ",(0,r.jsx)(s.code,{children:"tutorId"})," (String), ",(0,r.jsx)(s.code,{children:"studentId"})," (String), ",(0,r.jsx)(s.code,{children:"tutorName"})," (String), ",(0,r.jsx)(s.code,{children:"studentName"})," (String), ",(0,r.jsx)(s.code,{children:"sessionId"})," (String - related tutoring session), ",(0,r.jsx)(s.code,{children:"lastMessage"})," (String?), ",(0,r.jsx)(s.code,{children:"lastMessageTimestamp"})," (DateTime?), ",(0,r.jsx)(s.code,{children:"unreadCount"})," (int), ",(0,r.jsx)(s.code,{children:"isActive"})," (bool), ",(0,r.jsx)(s.code,{children:"createdAt"})," (DateTime), ",(0,r.jsx)(s.code,{children:"participants"})," (",(0,r.jsx)(s.code,{children:"List<String>"}),")."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"course",children:(0,r.jsx)(s.code,{children:"Course"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a subject at a specific grade level that a tutor can teach or a student needs help with."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"subjectType"})," (Subject enum), ",(0,r.jsx)(s.code,{children:"generalLevel"})," (Grade enum)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"grade",children:(0,r.jsx)(s.code,{children:"Grade"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," An enum representing academic grade levels."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Values:"})," ",(0,r.jsx)(s.code,{children:"unknown"}),", ",(0,r.jsx)(s.code,{children:"ten"}),", ",(0,r.jsx)(s.code,{children:"eleven"}),", ",(0,r.jsx)(s.code,{children:"twelve"}),", ",(0,r.jsx)(s.code,{children:"undergraduate"}),", ",(0,r.jsx)(s.code,{children:"graduate"}),". Includes comparison operators."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"message",children:(0,r.jsx)(s.code,{children:"Message"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a single message within a ",(0,r.jsx)(s.code,{children:"ChatRoom"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"id"})," (String), ",(0,r.jsx)(s.code,{children:"chatRoomId"})," (String), ",(0,r.jsx)(s.code,{children:"senderId"})," (String), ",(0,r.jsx)(s.code,{children:"senderName"})," (String), ",(0,r.jsx)(s.code,{children:"content"})," (String), ",(0,r.jsx)(s.code,{children:"timestamp"})," (DateTime), ",(0,r.jsx)(s.code,{children:"isRead"})," (bool), ",(0,r.jsx)(s.code,{children:"messageType"})," (MessageType enum)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Related Enum:"})," ",(0,r.jsx)(s.code,{children:"MessageType"})," (text, image, file, system)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"schedule",children:(0,r.jsx)(s.code,{children:"Schedule"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a user's availability or booked slots for a specific month and year."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"year"})," (int), ",(0,r.jsx)(s.code,{children:"month"})," (Month enum), ",(0,r.jsx)(s.code,{children:"slots"})," (",(0,r.jsx)(s.code,{children:"List<TimeSlot>"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Related Enum:"})," ",(0,r.jsx)(s.code,{children:"Month"})," (january to december)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"session",children:(0,r.jsx)(s.code,{children:"Session"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a scheduled tutoring session between a tutor and a student."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"id"})," (String), ",(0,r.jsx)(s.code,{children:"timeslot"})," (TimeSlot?), ",(0,r.jsx)(s.code,{children:"tutorId"})," (String), ",(0,r.jsx)(s.code,{children:"studentId"})," (String), ",(0,r.jsx)(s.code,{children:"status"})," (SessionStatus enum)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"sessionlistfilter",children:(0,r.jsx)(s.code,{children:"SessionListFilter"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," A value object used to filter the list of sessions."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"selectedDate"})," (DateTime?), ",(0,r.jsx)(s.code,{children:"statuses"})," (",(0,r.jsx)(s.code,{children:"Set<SessionStatus>"}),"), ",(0,r.jsx)(s.code,{children:"searchStrings"})," (",(0,r.jsx)(s.code,{children:"Set<String>"}),")."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"sessionstatus",children:(0,r.jsx)(s.code,{children:"SessionStatus"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," An enum representing the current status of a ",(0,r.jsx)(s.code,{children:"Session"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Values:"})," ",(0,r.jsx)(s.code,{children:"scheduled"}),", ",(0,r.jsx)(s.code,{children:"inProgress"}),", ",(0,r.jsx)(s.code,{children:"completed"}),", ",(0,r.jsx)(s.code,{children:"cancelled"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"student",children:(0,r.jsx)(s.code,{children:"Student"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a user with the role of a student. Contains student-specific profile information."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"uid"})," (String), ",(0,r.jsx)(s.code,{children:"bio"})," (String), ",(0,r.jsx)(s.code,{children:"headline"})," (String), ",(0,r.jsx)(s.code,{children:"status"})," (StudentStatus enum), ",(0,r.jsx)(s.code,{children:"courses"})," (",(0,r.jsx)(s.code,{children:"List<Course>"}),"), ",(0,r.jsx)(s.code,{children:"gradeLevel"})," (Grade enum), ",(0,r.jsx)(s.code,{children:"educationInstitute"})," (String)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Related Enum:"})," ",(0,r.jsx)(s.code,{children:"StudentStatus"})," (active, inactive)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"subject",children:(0,r.jsx)(s.code,{children:"Subject"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," An enum representing academic subjects."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Values:"})," ",(0,r.jsx)(s.code,{children:"math"}),", ",(0,r.jsx)(s.code,{children:"science"}),", ",(0,r.jsx)(s.code,{children:"english"}),", ",(0,r.jsx)(s.code,{children:"chemistry"}),", ",(0,r.jsx)(s.code,{children:"physics"}),", ",(0,r.jsx)(s.code,{children:"biology"}),", ",(0,r.jsx)(s.code,{children:"socialStudies"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"timeslot",children:(0,r.jsx)(s.code,{children:"TimeSlot"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a specific block of time, typically an hour, defined by a start and end ",(0,r.jsx)(s.code,{children:"DateTime"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"id"})," (String?), ",(0,r.jsx)(s.code,{children:"name"})," (String?), ",(0,r.jsx)(s.code,{children:"start"})," (DateTime), ",(0,r.jsx)(s.code,{children:"end"})," (DateTime)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"tutor",children:(0,r.jsx)(s.code,{children:"Tutor"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a user with the role of a tutor. Contains tutor-specific profile information."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"uid"})," (String), ",(0,r.jsx)(s.code,{children:"bio"})," (String), ",(0,r.jsx)(s.code,{children:"headline"})," (String), ",(0,r.jsx)(s.code,{children:"courses"})," (",(0,r.jsx)(s.code,{children:"List<Course>"}),"), ",(0,r.jsx)(s.code,{children:"tutorStatus"})," (TutorStatus enum), ",(0,r.jsx)(s.code,{children:"academicCredentials"})," (",(0,r.jsx)(s.code,{children:"List<AcademicCredential>"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Related Enum:"})," ",(0,r.jsx)(s.code,{children:"TutorStatus"})," (active, inactive)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"user",children:(0,r.jsx)(s.code,{children:"User"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Represents a general user in the system, containing common profile information."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Key Attributes:"})," ",(0,r.jsx)(s.code,{children:"email"})," (String), ",(0,r.jsx)(s.code,{children:"name"})," (String), ",(0,r.jsx)(s.code,{children:"imageUrl"})," (String?), ",(0,r.jsx)(s.code,{children:"coverUrl"})," (String?), ",(0,r.jsx)(s.code,{children:"role"})," (UserRole enum), ",(0,r.jsx)(s.code,{children:"schedule"})," (Schedule?), ",(0,r.jsx)(s.code,{children:"isAdmin"})," (bool)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"userrole",children:(0,r.jsx)(s.code,{children:"UserRole"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," An enum representing the role of a user within the application."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Values:"})," ",(0,r.jsx)(s.code,{children:"tutor"}),", ",(0,r.jsx)(s.code,{children:"student"}),", ",(0,r.jsx)(s.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h2,{id:"repositories-libcorerepositories",children:["Repositories (",(0,r.jsx)(s.code,{children:"lib/core/repositories/"}),")"]}),"\n",(0,r.jsx)(s.p,{children:'This section details each repository, outlining its responsibilities, the services it depends on (see Section under "Data Layer Services"), the domain models it manages (see Section under "Domain Models"), and its public interface.'}),"\n",(0,r.jsx)(s.h3,{id:"authenticationrepository",children:(0,r.jsx)(s.code,{children:"AuthenticationRepository"})}),"\n",(0,r.jsx)(s.p,{children:"Handles all aspects of user authentication, including sign-up, sign-in, sign-out, and password management."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Services Used:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Firebase Authentication"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Google Sign-In"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concerned Domain Models:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"AuthCredential"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Public Methods:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"get credential"}),": ",(0,r.jsx)(s.code,{children:"Stream<AuthCredential>"})," - Provides a stream of the current authentication credential, emitting new values upon authentication state changes."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"get currentCredential"}),": ",(0,r.jsx)(s.code,{children:"AuthCredential"})," - Synchronously retrieves the currently cached authentication credential."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"signUp({required String email, required String password})"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Creates a new user account using email and password."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"logInWithGoogle()"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Initiates the Google Sign-In flow and authenticates the user with Firebase."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"logInWithEmailAndPassword({required String email, required String password})"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Signs in an existing user with their email and password."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"logOut()"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Signs out the currently authenticated user from both Firebase and Google Sign-In if applicable."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"resetPassword({required String email})"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Sends a password reset email to the provided email address."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"chatrepository",children:(0,r.jsx)(s.code,{children:"ChatRepository"})}),"\n",(0,r.jsx)(s.p,{children:"Manages operations related to chat rooms and messages, including sending messages, creating chat rooms, and retrieving chat history."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Services Used:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Firebase Firestore"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concerned Domain Models:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Message"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"ChatRoom"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Public Methods:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sendMessage(String chatRoomId, Message message)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Adds a new message to the specified chat room and updates the chat room's last message details."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"createChatRoom(ChatRoom chatRoom)"}),": ",(0,r.jsx)(s.code,{children:"Future<String>"})," - Creates a new chat room document in Firestore and returns its ID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getChatRoom(String chatRoomId)"}),": ",(0,r.jsx)(s.code,{children:"Future<ChatRoom?>"})," - Retrieves a specific chat room by its ID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"markMessagesAsRead(String chatRoomId, String userId)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Updates the ",(0,r.jsx)(s.code,{children:"isRead"})," status of messages in a chat room for a given user."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getMessages(String chatRoomId)"}),": ",(0,r.jsx)(s.code,{children:"Future<List<Message>>"})," - Fetches all messages for a specific chat room, ordered by timestamp."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"sessionrepository",children:(0,r.jsx)(s.code,{children:"SessionRepository"})}),"\n",(0,r.jsx)(s.p,{children:"Handles data operations for tutoring sessions, such as fetching session lists, creating new sessions, and retrieving details for a specific session."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Services Used:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Firebase Firestore"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concerned Domain Models:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Session"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"TimeSlot"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"SessionStatus"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Public Methods:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getSessions()"}),": ",(0,r.jsx)(s.code,{children:"Stream<List<Session>>"})," - Returns a stream of all sessions, allowing real-time updates."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"create(Session session)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Adds a new session document to Firestore."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getSessionById(String sessionId)"}),": ",(0,r.jsx)(s.code,{children:"Future<Session?>"})," - Retrieves a specific session by its unique ID."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"storagerepository",children:(0,r.jsx)(s.code,{children:"StorageRepository"})}),"\n",(0,r.jsx)(s.p,{children:"Manages file uploads to cloud storage, primarily used for user profile images or other media."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Services Used:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Firebase Storage"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concerned Domain Models:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"None directly. Deals with file paths (String) and download URLs (String)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Public Methods:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"uploadFile(String userId, String filePath)"}),": ",(0,r.jsx)(s.code,{children:"Future<String>"})," - Uploads a file from the local ",(0,r.jsx)(s.code,{children:"filePath"})," to a user-specific path in Firebase Storage and returns the public download URL. Returns an empty string if ",(0,r.jsx)(s.code,{children:"filePath"})," is empty."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"studentrepository",children:(0,r.jsx)(s.code,{children:"StudentRepository"})}),"\n",(0,r.jsx)(s.p,{children:"Manages data operations specific to student profiles."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Services Used:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Firebase Firestore"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concerned Domain Models:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Student"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Public Methods:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"createStudent(String uid, Student student)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Creates a new student profile document in Firestore, identified by the user's UID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getStudent(String uid)"}),": ",(0,r.jsx)(s.code,{children:"Future<Student?>"})," - Retrieves a specific student's profile by their UID."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tutorrepository",children:(0,r.jsx)(s.code,{children:"TutorRepository"})}),"\n",(0,r.jsx)(s.p,{children:"Manages data operations specific to tutor profiles."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Services Used:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Firebase Firestore"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concerned Domain Models:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Tutor"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Public Methods:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"createTutor(String uid, Tutor tutor)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Creates a new tutor profile document in Firestore, identified by the user's UID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getTutors()"}),": ",(0,r.jsx)(s.code,{children:"Future<List<Tutor>>"})," - Retrieves a list of all tutor profiles."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getTutor(String uid)"}),": ",(0,r.jsx)(s.code,{children:"Future<Tutor?>"})," - Retrieves a specific tutor's profile by their UID."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"userrepository",children:(0,r.jsx)(s.code,{children:"UserRepository"})}),"\n",(0,r.jsx)(s.p,{children:"Handles general user data operations, such as creating, retrieving, updating, and deleting user profiles that are common to all user roles."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Services Used:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Firebase Firestore"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concerned Domain Models:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"User"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"UserRole"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"Schedule"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Public Methods:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"createUser(String uid, User user)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Creates a new user document in Firestore, associated with the provided UID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getUser(String uid)"}),": ",(0,r.jsx)(s.code,{children:"Future<User>"})," - Retrieves a user document by UID. Returns ",(0,r.jsx)(s.code,{children:"User.empty"})," if not found."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"updateUser(String uid, User user)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Updates an existing user document."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"updateUserRole(String uid, UserRole role)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Specifically updates the ",(0,r.jsx)(s.code,{children:"role"})," field of a user document."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"updateAdminStatus(String uid, bool isAdmin)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Specifically updates the ",(0,r.jsx)(s.code,{children:"isAdmin"})," field of a user document."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"deleteUser(String uid)"}),": ",(0,r.jsx)(s.code,{children:"Future<void>"})," - Deletes a user document by UID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"getUsers()"}),": ",(0,r.jsx)(s.code,{children:"Future<List<User>>"})," - Retrieves a list of all user documents."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);